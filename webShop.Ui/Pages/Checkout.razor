@page "/Checkout"

@using webShop.Abstractions
@using webShop.Model

@inject IOrderService OrderService;
@inject ICartService CartService;
@inject NavigationManager NavigationManager

<h3 class="order__title@(OrderSuccess ? "order__success" : "")">
    @(OrderSuccess ? "Order Successfully placed!" : "Place your order")
</h3>
<article class="order__wrapper">
    <section class="order__info--wrapper">
        <p class="order__info">Payment method: @PaymentMethod</p>
        <p class="order__info">Total: @Total</p>
    </section>
    <EditForm class="order__form--wrapper" Model="_customer" OnSubmit="HandleFormSubmit">
        <div class="order__form--inputs">
            <InputText @bind-Value="_customer.FirstName"
                       class="order__form--input short" placeholder="First Name">
            </InputText>
            <InputText @bind-Value="_customer.LastName"
                       class="order__form--input short" placeholder="Last Name">
            </InputText>

            <InputText @bind-Value="_customer.Email"
                       class="order__form--input long" placeholder="E-mail">
            </InputText>
            <InputText @bind-Value="_customer.Address"
                       class="order__form--input long" placeholder="Address">
            </InputText>
        </div>  
        <ul class="order__form--errors">
            @if (_errors != null)
            {
                foreach (var error in _errors)
                {
                    <p class="order__form--error">@error</p>
                }
            }
        </ul>
        <input type="submit" class="order__form--submit" value="Place Order">
    </EditForm>
</article>

@code {
    private PaymentMethod PaymentMethod { get; set; }
    private double Total { get; set; }
    private bool OrderSuccess { get; set; }

    private Customer? _customer = new Customer();

    private List<string>? _errors = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PaymentMethod = CartService.GetPaymentMethod();
        Total = CartService.GetCartTotal();
    }

    private async Task HandleFormSubmit()
    {
        if (!ValidateFormAndIndicateSuccess())
            return;
        await PlaceOrderAsync();
    }

    private void HandleSuccessfulResult()
    {
        OrderSuccess = true;
        StateHasChanged();
        Thread.Sleep(2500);
        NavigationManager.NavigateTo("/");
    }

    private async Task PlaceOrderAsync()
    {
        var order = new Order
        {
            Customer = _customer,
            Items = CartService.GetItems().ToList(),
            TimeStamp = DateTime.Now
        };

        var result = await OrderService.PlaceOrderAsync(order);

        if (result.IsSuccess)
            HandleSuccessfulResult();

        _errors = result.Errors;
        StateHasChanged();
    }

    private bool ValidateFormAndIndicateSuccess()
    {
        _errors = new List<string>();

        if (string.IsNullOrEmpty(_customer?.FirstName))
            _errors.Add("please fill in your first name.");
        if (string.IsNullOrEmpty(_customer?.LastName))
            _errors.Add("please fill in your last name.");
        if (string.IsNullOrEmpty(_customer?.Email))
            _errors.Add("please fill in your last name.");
        if (string.IsNullOrEmpty(_customer?.Address))
            _errors.Add("please fill in your address.");

        return !_errors.Any();
    }

}