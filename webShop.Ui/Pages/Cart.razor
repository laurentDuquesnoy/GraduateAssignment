@page "/Cart"
@using webShop.Abstractions
@using webShop.Model
@using webShop.Ui.Components

@inject ICartService CartService;

<h3>Your shopping Cart</h3>
<article class="cart__wrapper">
    <ul class="cart__items--wrapper">
        @foreach (var item in ShopItems)
        {
            <CartItem ShopItem=@item RemoveFromCart=@RemoveItem></CartItem>
        }
    </ul>
    <section class="cart__checkout--wrapper">
        <p class="cart__checkout--total">Grand total: @CartTotal</p>
        <div class="cart__paymentMethod--wrapper">
            <div class="cart__paymentMethod @(SelectedPaymentMethod == 1 ? "selected" : "")"
                 @onclick="() => ChangePaymentMethod(1)">
                <p class="cart__paymentMethod--name">MasterCard</p>
                <img class="cart__paymentMethod--image" src="Assets/masterCard.png" alt="MasterCard"/>
            </div>
            <div class="cart__paymentMethod   @(SelectedPaymentMethod == 2 ? "selected" : "")"
                 @onclick="() => ChangePaymentMethod(2)">
                <p class="cart__paymentMethod--name">Paypal</p>
                <img class="cart__paymentMethod--image" src="Assets/paypal.png" alt="PayPal"/>
            </div>
            <div class="cart__paymentMethod   @(SelectedPaymentMethod == 3 ? "selected" : "")"
                 @onclick="() => ChangePaymentMethod(3)">
                <p class="cart__paymentMethod--name">Maestro</p>
                <img class="cart__paymentMethod--image" src="Assets/maestro.png" alt="Maestro"/>
            </div>
        </div>
        <p class="cart__checkout--button" @onclick="Checkout">Pay and check out</p>

    </section>
</article>


@code {
    private List<ShopItem> ShopItems { get; set; } = new();
    private double CartTotal { get; set; }
    private int SelectedPaymentMethod { get; set; }

    //todo checkout

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SelectedPaymentMethod = 1;
        ShopItems = CartService.GetItems().ToList();
        CartTotal = CartService.CalculateTotal();
    }

    private void RemoveItem(int id)
    {
        CartService.RemoveFromCart(id);
        ShopItems = CartService.GetItems().ToList();
        CartTotal = CartService.CalculateTotal();
        StateHasChanged();
    }

    private void ChangePaymentMethod(int method)
    {
        SelectedPaymentMethod = method;
        StateHasChanged();
    }

    private void Checkout()
    {
        if (CartService.GetNumberOfItemsInCart() == 0)
            return;
        
        var paymentMethod = string.Empty;
        switch (SelectedPaymentMethod)
        {
            case 1:
                paymentMethod = "MasterCard";
                break;
            case 2:
                paymentMethod = "PayPal";
                break;
            case 3:
                paymentMethod = "Maestro";
                break;
        }
        
        CartService.SetPaymentMethod(paymentMethod);
    }
}